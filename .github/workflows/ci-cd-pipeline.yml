name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]
    tags: ['v*.*.*']  # Added tag trigger for production
  pull_request:
    branches: [main, staging]  # Added staging branch for PRs

# Global permissions
permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fixed: Safe reference for both PRs and pushes
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install flask pytest python-dotenv

    - name: Run tests
      run: python -m pytest test_app.py -v

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build application
      run: |
        echo "Building Flask application..."
        echo "Build completed successfully!"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    environment: staging  # Added environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      env:
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
      run: |
        echo "Deploying to staging environment..."
        echo "Staging deployment completed!"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production  # Added environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      env:
        DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
      run: |
        echo "DEPLOYING TO PRODUCTION!"
        echo "Production deployment successful!"
